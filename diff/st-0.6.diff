diff --git a/config.def.h b/config.def.h
index 64e75b8..81ec399 100644
--- a/config.def.h
+++ b/config.def.h
@@ -11,6 +11,9 @@ static char shell[] = "/bin/sh";
 static char *utmp = NULL;
 static char stty_args[] = "stty raw -echo -iexten echonl";
 
+/* Size of the scrollback buffer */
+#define HISTSIZE 2000
+
 /* identification sequence returned in DA and DECID */
 static char vtiden[] = "\033[?6c";
 
@@ -87,6 +90,8 @@ static const char *colorname[] = {
 	"#cccccc",
 };
 
+/* Use intense basic system colors */
+static unsigned int useintensecolors = 1;
 
 /*
  * Default colors (colorname index)
@@ -104,16 +109,26 @@ static unsigned int defaultcs = 256;
 static unsigned int defaultitalic = 11;
 static unsigned int defaultunderline = 7;
 
+/* Internal keyboard shortcuts. */
+#define MODKEY Mod1Mask
+
 /* Internal mouse shortcuts. */
 /* Beware that overloading Button1 will disable the selection. */
 static Mousekey mshortcuts[] = {
 	/* button               mask            string */
-	{ Button4,              XK_ANY_MOD,     "\031" },
-	{ Button5,              XK_ANY_MOD,     "\005" },
+	{ Button4,              XK_NO_MOD,     "\031" },
+	{ Button5,              XK_NO_MOD,     "\005" },
 };
 
-/* Internal keyboard shortcuts. */
-#define MODKEY Mod1Mask
+/*
+ * Ulterior mouse shortcuts.
+ * These ones actually call a function.
+ */
+static MouseShortcut2 mshortcuts2[] = {
+	/* button               mask            function        argument */
+	{ Button4,              ShiftMask,      hscrollup,      {.i =  1} },
+	{ Button5,              ShiftMask,      hscrolldown,    {.i =  1} },
+};
 
 static Shortcut shortcuts[] = {
 	/* mask                 keysym          function        argument */
@@ -128,6 +143,8 @@ static Shortcut shortcuts[] = {
 	{ MODKEY|ShiftMask,     XK_C,           clipcopy,       {.i =  0} },
 	{ MODKEY|ShiftMask,     XK_V,           clippaste,      {.i =  0} },
 	{ MODKEY,               XK_Num_Lock,    numlock,        {.i =  0} },
+	{ ShiftMask,            XK_Page_Up,     hscrollup,      {.i = -1} },
+	{ ShiftMask,            XK_Page_Down,   hscrolldown,    {.i = -1} },
 };
 
 /*
diff --git a/st.c b/st.c
index b89d094..9b13e79 100644
--- a/st.c
+++ b/st.c
@@ -84,6 +84,8 @@ char *argv0;
 #define TRUEGREEN(x)     (((x) & 0xff00))
 #define TRUEBLUE(x)      (((x) & 0xff) << 8)
 
+#define TLINE(x)		((x) < term.scr ? term.hist[(term.hbot + term.hlen + (x) - term.scr) % \
+				HISTSIZE] : term.line[(x) - term.scr])
 
 enum glyph_attribute {
 	ATTR_NULL       = 0,
@@ -225,26 +227,6 @@ typedef struct {
 	int narg;              /* nb of args */
 } STREscape;
 
-/* Internal representation of the screen */
-typedef struct {
-	int row;      /* nb row */
-	int col;      /* nb col */
-	Line *line;   /* screen */
-	Line *alt;    /* alternate screen */
-	bool *dirty;  /* dirtyness of lines */
-	XftGlyphFontSpec *specbuf; /* font spec buffer used for rendering */
-	TCursor c;    /* cursor */
-	int top;      /* top    scroll limit */
-	int bot;      /* bottom scroll limit */
-	int mode;     /* terminal mode flags */
-	int esc;      /* escape state flags */
-	char trantbl[4]; /* charset table translation */
-	int charset;  /* current charset */
-	int icharset; /* selected charset for sequence */
-	bool numlock; /* lock numbers in keyboard */
-	bool *tabs;
-} Term;
-
 /* Purely graphic info */
 typedef struct {
 	Display *dpy;
@@ -315,6 +297,13 @@ typedef union {
 } Arg;
 
 typedef struct {
+	uint b;
+	uint mask;
+	void (*func)(const Arg *);
+	const Arg arg;
+} MouseShortcut2;
+
+typedef struct {
 	uint mod;
 	KeySym keysym;
 	void (*func)(const Arg *);
@@ -324,6 +313,8 @@ typedef struct {
 /* function definitions used in config.h */
 static void clipcopy(const Arg *);
 static void clippaste(const Arg *);
+static void hscrolldown(const Arg *);
+static void hscrollup(const Arg *);
 static void numlock(const Arg *);
 static void selpaste(const Arg *);
 static void xzoom(const Arg *);
@@ -336,6 +327,30 @@ static void toggleprinter(const Arg *);
 /* Config.h for applying patches and the configuration. */
 #include "config.h"
 
+/* Internal representation of the screen */
+typedef struct {
+	int row;      /* nb row */
+	int col;      /* nb col */
+	Line *line;   /* screen */
+	Line *alt;    /* alternate screen */
+	Line hist[HISTSIZE]; /* history buffer */
+	int hlen;    /* history length */
+	int hbot;    /* history bottom (least recent) */
+	int scr;      /* scroll back */
+	int *dirty;   /* dirtyness of lines */
+	XftGlyphFontSpec *specbuf; /* font spec buffer used for rendering */
+	TCursor c;    /* cursor */
+	int top;      /* top    scroll limit */
+	int bot;      /* bottom scroll limit */
+	int mode;     /* terminal mode flags */
+	int esc;      /* escape state flags */
+	char trantbl[4]; /* charset table translation */
+	int charset;  /* current charset */
+	int icharset; /* selected charset for sequence */
+	int numlock; /* lock numbers in keyboard */
+	int *tabs;
+} Term;
+
 /* Font structure */
 typedef struct {
 	int height;
@@ -481,6 +496,10 @@ static void *xmalloc(size_t);
 static void *xrealloc(void *, size_t);
 static char *xstrdup(char *);
 
+static void hresize(int);
+static void hpush(int);
+static void hpop(int);
+
 static void usage(void);
 
 static void (*handler[LASTEvent])(XEvent *) = {
@@ -698,10 +717,10 @@ int
 tlinelen(int y) {
 	int i = term.col;
 
-	if(term.line[y][i - 1].mode & ATTR_WRAP)
+	if(TLINE(y)[i - 1].mode & ATTR_WRAP)
 		return i;
 
-	while(i > 0 && term.line[y][i - 1].u == ' ')
+	while(i > 0 && TLINE(y)[i - 1].u == ' ')
 		--i;
 
 	return i;
@@ -760,7 +779,7 @@ selsnap(int *x, int *y, int direction) {
 		 * Snap around if the word wraps around at the end or
 		 * beginning of a line.
 		 */
-		prevgp = &term.line[*y][*x];
+		prevgp = &TLINE(*y)[*x];
 		prevdelim = ISDELIM(prevgp->u);
 		for(;;) {
 			newx = *x + direction;
@@ -782,7 +801,7 @@ selsnap(int *x, int *y, int direction) {
 			if (newx >= tlinelen(newy))
 				break;
 
-			gp = &term.line[newy][newx];
+			gp = &TLINE(newy)[newx];
 			delim = ISDELIM(gp->u);
 			if(!(gp->mode & ATTR_WDUMMY) && (delim != prevdelim
 					|| (delim && gp->u != prevgp->u)))
@@ -803,14 +822,14 @@ selsnap(int *x, int *y, int direction) {
 		*x = (direction < 0) ? 0 : term.col - 1;
 		if(direction < 0) {
 			for(; *y > 0; *y += direction) {
-				if(!(term.line[*y-1][term.col-1].mode
+				if(!(TLINE(*y-1)[term.col-1].mode
 						& ATTR_WRAP)) {
 					break;
 				}
 			}
 		} else if(direction > 0) {
 			for(; *y < term.row-1; *y += direction) {
-				if(!(term.line[*y][term.col-1].mode
+				if(!(TLINE(*y)[term.col-1].mode
 						& ATTR_WRAP)) {
 					break;
 				}
@@ -907,6 +926,7 @@ void
 bpress(XEvent *e) {
 	struct timespec now;
 	Mousekey *mk;
+	MouseShortcut2 *ms2;
 
 	if(IS_SET(MODE_MOUSE) && !(e->xbutton.state & forceselmod)) {
 		mousereport(e);
@@ -921,6 +941,14 @@ bpress(XEvent *e) {
 		}
 	}
 
+	for (ms2 = mshortcuts2; ms2 < mshortcuts2 + LEN(mshortcuts2); ms2++) {
+		if (e->xbutton.button == ms2->b
+				&& match(ms2->mask, e->xbutton.state)) {
+			ms2->func(&ms2->arg);
+			return;
+		}
+	}
+
 	if(e->xbutton.button == Button1) {
 		clock_gettime(CLOCK_MONOTONIC, &now);
 
@@ -969,13 +997,13 @@ getsel(void) {
 		linelen = tlinelen(y);
 
 		if(sel.type == SEL_RECTANGULAR) {
-			gp = &term.line[y][sel.nb.x];
+			gp = &TLINE(y)[sel.nb.x];
 			lastx = sel.ne.x;
 		} else {
-			gp = &term.line[y][sel.nb.y == y ? sel.nb.x : 0];
+			gp = &TLINE(y)[sel.nb.y == y ? sel.nb.x : 0];
 			lastx = (sel.ne.y == y) ? sel.ne.x : term.col-1;
 		}
-		last = &term.line[y][MIN(lastx, linelen-1)];
+		last = &TLINE(y)[MIN(lastx, linelen-1)];
 		while(last >= gp && last->u == ' ')
 			--last;
 
@@ -1378,10 +1406,17 @@ ttyread(void) {
 
 	/* keep any uncomplete utf8 char for the next call */
 	memmove(buf, ptr, buflen);
+
+	if (term.scr > 0 && term.scr < HISTSIZE-1)
+		term.scr++;
 }
 
 void
 ttywrite(const char *s, size_t n) {
+	Arg arg = (Arg){ .i = term.scr };
+
+	hscrolldown(&arg);
+
 	if(xwrite(cmdfd, s, n) == -1)
 		die("write error on tty: %s\n", strerror(errno));
 }
@@ -1506,6 +1541,102 @@ tnew(int col, int row) {
 }
 
 void
+hpush(int orig)
+{
+	int htop = (term.hbot + term.hlen) % HISTSIZE;
+
+	if (term.hlen == HISTSIZE)
+		term.hbot = (term.hbot + 1) % HISTSIZE;
+	else
+		term.hlen++;
+
+	memcpy(term.hist[htop], term.line[orig], term.col * sizeof(Glyph));
+}
+
+void
+hpop(int orig)
+{
+	if (term.hlen == 0)
+		return;
+	else
+		term.hlen--;
+
+	memcpy(term.hist[term.hbot], term.line[orig], term.col * sizeof(Glyph));
+}
+
+void
+hscrolldown(const Arg* a)
+{
+	int n = a->i;
+
+	if (n < 0)
+		n = term.row + n;
+
+	if (n > term.scr)
+		n = term.scr;
+
+	if (term.scr > 0) {
+		term.scr -= n;
+		selscroll(0, -n);
+		tfulldirt();
+	}
+}
+
+void
+hscrollup(const Arg* a)
+{
+	int n = a->i;
+
+	if (n < 0)
+		n = term.row + n;
+
+	if (n > term.hlen - term.scr)
+		n = term.hlen - term.scr;
+
+	if (term.scr < term.hlen) {
+		term.scr += n;
+		selscroll(0, n);
+		tfulldirt();
+	}
+}
+
+void
+hresize(int col)
+{
+	int mincol = MIN(col, term.col);
+	int x, y;
+	Glyph *gp;
+
+	for (y = 0; y < HISTSIZE; y++) {
+		term.hist[y] = xrealloc(term.hist[y], col * sizeof(Glyph));
+
+		for (x = mincol; x < col; x++) {
+			if (selected(x, y) && sel.ob.x != -1) {
+				sel.mode = SEL_IDLE;
+				sel.ob.x = -1;
+			}
+
+			gp = &term.hist[y][x];
+			gp->fg = term.c.attr.fg;
+			gp->bg = term.c.attr.bg;
+			gp->mode = 0;
+			gp->u = ' ';
+		}
+	}
+}
+
+void
 tswapscreen(void) {
 	Line *tmp = term.line;
 
@@ -1587,6 +1718,7 @@ tnewline(int first_col) {
 	int y = term.c.y;
 
 	if(y == term.bot) {
+		hpush(term.top);
 		tscrollup(term.top, 1);
 	} else {
 		y++;
@@ -2633,6 +2765,7 @@ eschandle(uchar ascii) {
 		return 0;
 	case 'D': /* IND -- Linefeed */
 		if(term.c.y == term.bot) {
+			hpush(term.top);
 			tscrollup(term.top, 1);
 		} else {
 			tmoveto(term.c.x, term.c.y+1);
@@ -2646,6 +2779,7 @@ eschandle(uchar ascii) {
 		break;
 	case 'M': /* RI -- Reverse index */
 		if(term.c.y == term.top) {
+			hpop(term.bot);
 			tscrolldown(term.top, 1);
 		} else {
 			tmoveto(term.c.x, term.c.y-1);
@@ -3453,7 +3587,8 @@ xdrawglyphfontspecs(const XftGlyphFontSpec *specs, Glyph base, int len, int x, i
 	}
 
 	/* Change basic system colors [0-7] to bright system colors [8-15] */
-	if((base.mode & ATTR_BOLD_FAINT) == ATTR_BOLD && BETWEEN(base.fg, 0, 7))
+	if (useintensecolors && (base.mode & ATTR_BOLD_FAINT) == ATTR_BOLD && 
+            BETWEEN(base.fg, 0, 7))
 		fg = &dc.col[base.fg + 8];
 
 	if(IS_SET(MODE_REVERSE)) {
@@ -3679,7 +3814,7 @@ drawregion(int x1, int y1, int x2, int y2) {
 		term.dirty[y] = 0;
 
 		specs = term.specbuf;
-		numspecs = xmakeglyphfontspecs(specs, &term.line[y][x1], x2 - x1, x1, y);
+		numspecs = xmakeglyphfontspecs(specs, &TLINE(y)[x1], x2 - x1, x1, y);
 
 		i = ox = 0;
 		for(x = x1; x < x2 && i < numspecs; x++) {
@@ -3703,7 +3838,9 @@ drawregion(int x1, int y1, int x2, int y2) {
 		if(i > 0)
 			xdrawglyphfontspecs(specs, base, i, ox, y);
 	}
-	xdrawcursor();
+
+	if (term.scr == 0)
+		xdrawcursor();
 }
 
 void
@@ -3887,6 +4024,7 @@ cresize(int width, int height) {
 	col = (xw.w - 2 * borderpx) / xw.cw;
 	row = (xw.h - 2 * borderpx) / xw.ch;
 
+	hresize(col);
 	tresize(col, row);
 	xresize(col, row);
 	ttyresize();
@@ -4072,6 +4210,7 @@ run:
 	}
 	setlocale(LC_CTYPE, "");
 	XSetLocaleModifiers("");
+	hresize(MAX(cols, 1));
 	tnew(MAX(cols, 1), MAX(rows, 1));
 	xinit();
 	selinit();
